From ceb591563c9348a6ef60d3f5d614a3cf6555304a Mon Sep 17 00:00:00 2001
From: Jeremy Ouillette <jeremy.ouillette@intel.com>
Date: Wed, 18 Jun 2025 20:09:21 -0700
Subject: [PATCH 1/3] Update CMakeLists to enable static libraries. Disable old
 examples by default. Use libpangolin instead of building it from source.
 Build thirdparty libraries statically. Enable building for C++17.

---
 CMakeLists.txt                   | 266 +++++++++++++++++--------------
 Thirdparty/DBoW2/CMakeLists.txt  |  22 ++-
 Thirdparty/Sophus/CMakeLists.txt |   4 +-
 Thirdparty/g2o/CMakeLists.txt    |  28 +++-
 build.sh                         |   7 +-
 5 files changed, 190 insertions(+), 137 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 016e743..aeba869 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,9 @@
 cmake_minimum_required(VERSION 2.8)
 project(ORB_SLAM3)
 
+option(BUILD_EXAMPLES_OLD "Build Examples (Old)" OFF)
+option(LINK_LIBRARY_STATIC "Link libraries statically" OFF)
+
 IF(NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE Release)
 ENDIF()
@@ -14,9 +17,14 @@ set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native")
 
 # Check C++11 or C++0x support
 include(CheckCXXCompilerFlag)
+CHECK_CXX_COMPILER_FLAG("-std=c++17" COMPILER_SUPPORTS_CXX17)
 CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
 CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
-if(COMPILER_SUPPORTS_CXX11)
+if(COMPILER_SUPPORTS_CXX17)
+   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
+   add_definitions(-DCOMPILEDWITHC11)
+   message(STATUS "Using flag -std=c++17.")
+elseif(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    add_definitions(-DCOMPILEDWITHC11)
    message(STATUS "Using flag -std=c++11.")
@@ -115,15 +123,27 @@ include/Settings.h)
 
 add_subdirectory(Thirdparty/g2o)
 
-target_link_libraries(${PROJECT_NAME}
-${OpenCV_LIBS}
-${EIGEN3_LIBS}
-${Pangolin_LIBRARIES}
-${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
-${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.so
--lboost_serialization
--lcrypto
-)
+if(LINK_LIBRARY_STATIC)
+    target_link_libraries(${PROJECT_NAME}
+    ${OpenCV_LIBS}
+    ${EIGEN3_LIBS}
+    ${Pangolin_LIBRARIES}
+    ${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.a
+    ${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.a
+    -lboost_serialization
+    -lcrypto
+    )
+else()
+    target_link_libraries(${PROJECT_NAME}
+    ${OpenCV_LIBS}
+    ${EIGEN3_LIBS}
+    ${Pangolin_LIBRARIES}
+    ${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
+    ${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.so
+    -lboost_serialization
+    -lcrypto
+    )
+endif()
 
 # If RealSense SDK is found the library is added and its examples compiled
 if(realsense2_FOUND)
@@ -270,121 +290,123 @@ endif()
 
 #Old examples
 
-# RGB-D examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D)
+if(BUILD_EXAMPLES_OLD)
+	# RGB-D examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D)
 
-add_executable(rgbd_tum_old
-        Examples_old/RGB-D/rgbd_tum.cc)
-target_link_libraries(rgbd_tum_old ${PROJECT_NAME})
+	add_executable(rgbd_tum_old
+			Examples_old/RGB-D/rgbd_tum.cc)
+	target_link_libraries(rgbd_tum_old ${PROJECT_NAME})
 
-if(realsense2_FOUND)
-    add_executable(rgbd_realsense_D435i_old
-            Examples_old/RGB-D/rgbd_realsense_D435i.cc)
-    target_link_libraries(rgbd_realsense_D435i_old ${PROJECT_NAME})
-endif()
+	if(realsense2_FOUND)
+		add_executable(rgbd_realsense_D435i_old
+				Examples_old/RGB-D/rgbd_realsense_D435i.cc)
+		target_link_libraries(rgbd_realsense_D435i_old ${PROJECT_NAME})
+	endif()
 
 
-# RGB-D inertial examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D-Inertial)
-
-if(realsense2_FOUND)
-    add_executable(rgbd_inertial_realsense_D435i_old
-            Examples_old/RGB-D-Inertial/rgbd_inertial_realsense_D435i.cc)
-    target_link_libraries(rgbd_inertial_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-#Stereo examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo)
-
-add_executable(stereo_kitti_old
-        Examples_old/Stereo/stereo_kitti.cc)
-target_link_libraries(stereo_kitti_old ${PROJECT_NAME})
-
-add_executable(stereo_euroc_old
-        Examples_old/Stereo/stereo_euroc.cc)
-target_link_libraries(stereo_euroc_old ${PROJECT_NAME})
-
-add_executable(stereo_tum_vi_old
-        Examples_old/Stereo/stereo_tum_vi.cc)
-target_link_libraries(stereo_tum_vi_old ${PROJECT_NAME})
-
-if(realsense2_FOUND)
-    add_executable(stereo_realsense_t265_old
-            Examples_old/Stereo/stereo_realsense_t265.cc)
-    target_link_libraries(stereo_realsense_t265_old ${PROJECT_NAME})
-
-    add_executable(stereo_realsense_D435i_old
-            Examples_old/Stereo/stereo_realsense_D435i.cc)
-    target_link_libraries(stereo_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-#Monocular examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular)
-
-add_executable(mono_tum_old
-        Examples_old/Monocular/mono_tum.cc)
-target_link_libraries(mono_tum_old ${PROJECT_NAME})
-
-add_executable(mono_kitti_old
-        Examples_old/Monocular/mono_kitti.cc)
-target_link_libraries(mono_kitti_old ${PROJECT_NAME})
-
-add_executable(mono_euroc_old
-        Examples_old/Monocular/mono_euroc.cc)
-target_link_libraries(mono_euroc_old ${PROJECT_NAME})
-
-add_executable(mono_tum_vi_old
-        Examples_old/Monocular/mono_tum_vi.cc)
-target_link_libraries(mono_tum_vi_old ${PROJECT_NAME})
-
-if(realsense2_FOUND)
-    add_executable(mono_realsense_t265_old
-            Examples_old/Monocular/mono_realsense_t265.cc)
-    target_link_libraries(mono_realsense_t265_old ${PROJECT_NAME})
-
-    add_executable(mono_realsense_D435i_old
-            Examples_old/Monocular/mono_realsense_D435i.cc)
-    target_link_libraries(mono_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-#Monocular inertial examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular-Inertial)
-
-add_executable(mono_inertial_euroc_old
-        Examples_old/Monocular-Inertial/mono_inertial_euroc.cc)
-target_link_libraries(mono_inertial_euroc_old ${PROJECT_NAME})
-
-add_executable(mono_inertial_tum_vi_old
-        Examples_old/Monocular-Inertial/mono_inertial_tum_vi.cc)
-target_link_libraries(mono_inertial_tum_vi_old ${PROJECT_NAME})
-
-if(realsense2_FOUND)
-    add_executable(mono_inertial_realsense_t265_old
-            Examples_old/Monocular-Inertial/mono_inertial_realsense_t265.cc)
-    target_link_libraries(mono_inertial_realsense_t265_old ${PROJECT_NAME})
-
-    add_executable(mono_inertial_realsense_D435i_old
-            Examples_old/Monocular-Inertial/mono_inertial_realsense_D435i.cc)
-    target_link_libraries(mono_inertial_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-#Stereo Inertial examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo-Inertial)
-
-add_executable(stereo_inertial_euroc_old
-        Examples_old/Stereo-Inertial/stereo_inertial_euroc.cc)
-target_link_libraries(stereo_inertial_euroc_old ${PROJECT_NAME})
-
-add_executable(stereo_inertial_tum_vi_old
-        Examples_old/Stereo-Inertial/stereo_inertial_tum_vi.cc)
-target_link_libraries(stereo_inertial_tum_vi_old ${PROJECT_NAME})
-
-if(realsense2_FOUND)
-    add_executable(stereo_inertial_realsense_t265_old
-            Examples_old/Stereo-Inertial/stereo_inertial_realsense_t265.cc)
-    target_link_libraries(stereo_inertial_realsense_t265_old ${PROJECT_NAME})
+	# RGB-D inertial examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D-Inertial)
 
-    add_executable(stereo_inertial_realsense_D435i_old
-            Examples_old/Stereo-Inertial/stereo_inertial_realsense_D435i.cc)
-    target_link_libraries(stereo_inertial_realsense_D435i_old ${PROJECT_NAME})
+	if(realsense2_FOUND)
+		add_executable(rgbd_inertial_realsense_D435i_old
+				Examples_old/RGB-D-Inertial/rgbd_inertial_realsense_D435i.cc)
+		target_link_libraries(rgbd_inertial_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Stereo examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo)
+
+	add_executable(stereo_kitti_old
+			Examples_old/Stereo/stereo_kitti.cc)
+	target_link_libraries(stereo_kitti_old ${PROJECT_NAME})
+
+	add_executable(stereo_euroc_old
+			Examples_old/Stereo/stereo_euroc.cc)
+	target_link_libraries(stereo_euroc_old ${PROJECT_NAME})
+
+	add_executable(stereo_tum_vi_old
+			Examples_old/Stereo/stereo_tum_vi.cc)
+	target_link_libraries(stereo_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(stereo_realsense_t265_old
+				Examples_old/Stereo/stereo_realsense_t265.cc)
+		target_link_libraries(stereo_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(stereo_realsense_D435i_old
+				Examples_old/Stereo/stereo_realsense_D435i.cc)
+		target_link_libraries(stereo_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Monocular examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular)
+
+	add_executable(mono_tum_old
+			Examples_old/Monocular/mono_tum.cc)
+	target_link_libraries(mono_tum_old ${PROJECT_NAME})
+
+	add_executable(mono_kitti_old
+			Examples_old/Monocular/mono_kitti.cc)
+	target_link_libraries(mono_kitti_old ${PROJECT_NAME})
+
+	add_executable(mono_euroc_old
+			Examples_old/Monocular/mono_euroc.cc)
+	target_link_libraries(mono_euroc_old ${PROJECT_NAME})
+
+	add_executable(mono_tum_vi_old
+			Examples_old/Monocular/mono_tum_vi.cc)
+	target_link_libraries(mono_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(mono_realsense_t265_old
+				Examples_old/Monocular/mono_realsense_t265.cc)
+		target_link_libraries(mono_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(mono_realsense_D435i_old
+				Examples_old/Monocular/mono_realsense_D435i.cc)
+		target_link_libraries(mono_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Monocular inertial examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular-Inertial)
+
+	add_executable(mono_inertial_euroc_old
+			Examples_old/Monocular-Inertial/mono_inertial_euroc.cc)
+	target_link_libraries(mono_inertial_euroc_old ${PROJECT_NAME})
+
+	add_executable(mono_inertial_tum_vi_old
+			Examples_old/Monocular-Inertial/mono_inertial_tum_vi.cc)
+	target_link_libraries(mono_inertial_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(mono_inertial_realsense_t265_old
+				Examples_old/Monocular-Inertial/mono_inertial_realsense_t265.cc)
+		target_link_libraries(mono_inertial_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(mono_inertial_realsense_D435i_old
+				Examples_old/Monocular-Inertial/mono_inertial_realsense_D435i.cc)
+		target_link_libraries(mono_inertial_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Stereo Inertial examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo-Inertial)
+
+	add_executable(stereo_inertial_euroc_old
+			Examples_old/Stereo-Inertial/stereo_inertial_euroc.cc)
+	target_link_libraries(stereo_inertial_euroc_old ${PROJECT_NAME})
+
+	add_executable(stereo_inertial_tum_vi_old
+			Examples_old/Stereo-Inertial/stereo_inertial_tum_vi.cc)
+	target_link_libraries(stereo_inertial_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(stereo_inertial_realsense_t265_old
+				Examples_old/Stereo-Inertial/stereo_inertial_realsense_t265.cc)
+		target_link_libraries(stereo_inertial_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(stereo_inertial_realsense_D435i_old
+				Examples_old/Stereo-Inertial/stereo_inertial_realsense_D435i.cc)
+		target_link_libraries(stereo_inertial_realsense_D435i_old ${PROJECT_NAME})
+	endif()
 endif()
diff --git a/Thirdparty/DBoW2/CMakeLists.txt b/Thirdparty/DBoW2/CMakeLists.txt
index c312b25..83a2c07 100644
--- a/Thirdparty/DBoW2/CMakeLists.txt
+++ b/Thirdparty/DBoW2/CMakeLists.txt
@@ -1,12 +1,28 @@
 cmake_minimum_required(VERSION 2.8)
 project(DBoW2)
 
+include(CMakeDependentOption)
+cmake_dependent_option(
+  DBOW2_STATIC              # option variable
+  "Build static library"    # description
+  ON                        # default value if exposed; user can override
+  "NOT BUILD_SHARED_LIBS"   # condition to expose option
+  OFF                       # value if not exposed; user can't override
+)
+
+# set build type based on dependent option
+if(DBOW2_STATIC)
+  set(DBOW2_BUILD_TYPE STATIC)
+else()
+  set(DBOW2_BUILD_TYPE SHARED)
+endif()
+
 if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
 endif()
 
-set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall  -O3 -march=native ")
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall  -O3 -march=native")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall  -O3 -march=native -fPIC")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall  -O3 -march=native -fPIC")
 
 set(HDRS_DBOW2
   DBoW2/BowVector.h
@@ -40,6 +56,6 @@ endif()
 set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
 
 include_directories(${OpenCV_INCLUDE_DIRS})
-add_library(DBoW2 SHARED ${SRCS_DBOW2} ${SRCS_DUTILS})
+add_library(DBoW2 ${DBOW2_BUILD_TYPE} ${SRCS_DBOW2} ${SRCS_DUTILS})
 target_link_libraries(DBoW2 ${OpenCV_LIBS})
 
diff --git a/Thirdparty/Sophus/CMakeLists.txt b/Thirdparty/Sophus/CMakeLists.txt
index 933445b..e283786 100644
--- a/Thirdparty/Sophus/CMakeLists.txt
+++ b/Thirdparty/Sophus/CMakeLists.txt
@@ -16,11 +16,11 @@ set(CMAKE_CXX_STANDARD 11)
 IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g")
    SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
-   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra  -Wno-deprecated-register -Qunused-arguments -fcolor-diagnostics")
+   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -Wno-array-bounds -Wno-deprecated-register -Qunused-arguments -fcolor-diagnostics")
 ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g")
    SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
-   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -std=c++11 -Wno-deprecated-declarations -ftemplate-backtrace-limit=0")
+   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -std=c++11 -Wno-array-bounds -Wno-deprecated-declarations -ftemplate-backtrace-limit=0")
    SET(CMAKE_CXX_FLAGS_COVERAGE "${CMAKE_CXX_FLAGS_DEBUG} --coverage -fno-inline -fno-inline-small-functions -fno-default-inline")
    SET(CMAKE_EXE_LINKER_FLAGS_COVERAGE "${CMAKE_EXE_LINKER_FLAGS_DEBUG} --coverage")
    SET(CMAKE_SHARED_LINKER_FLAGS_COVERAGE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} --coverage")
diff --git a/Thirdparty/g2o/CMakeLists.txt b/Thirdparty/g2o/CMakeLists.txt
index 1a32ff9..4f3179c 100644
--- a/Thirdparty/g2o/CMakeLists.txt
+++ b/Thirdparty/g2o/CMakeLists.txt
@@ -6,6 +6,26 @@ PROJECT(g2o)
 SET(g2o_C_FLAGS)
 SET(g2o_CXX_FLAGS)
 
+include(CMakeDependentOption)
+cmake_dependent_option(
+  G2O_STATIC                # option variable
+  "Build static library"    # description
+  ON                        # default value if exposed; user can override
+  "NOT BUILD_SHARED_LIBS"   # condition to expose option
+  OFF                       # value if not exposed; user can't override
+)
+
+# set build type based on dependent option
+if(G2O_STATIC)
+  set(G2O_BUILD_TYPE STATIC)
+else()
+  set(G2O_BUILD_TYPE SHARED)
+endif()
+
+if(NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE Release)
+endif()
+
 # default built type
 if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
@@ -13,8 +33,6 @@ endif()
 
 MESSAGE(STATUS "BUILD TYPE:" ${CMAKE_BUILD_TYPE})
 
-SET (G2O_LIB_TYPE SHARED)
-
 # There seems to be an issue with MSVC8
 # see http://eigen.tuxfamily.org/bz/show_bug.cgi?id=83
 if(MSVC90)
@@ -60,8 +78,8 @@ SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3 -march=native")
 # SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3")
 
 # activate warnings !!!
-SET(g2o_C_FLAGS "${g2o_C_FLAGS} -Wall -W")
-SET(g2o_CXX_FLAGS "${g2o_CXX_FLAGS} -Wall -W")
+SET(g2o_C_FLAGS "${g2o_C_FLAGS} -Wall -W -fPIC")
+SET(g2o_CXX_FLAGS "${g2o_CXX_FLAGS} -Wall -W -fPIC")
 
 # specifying compiler flags
 SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${g2o_CXX_FLAGS}")
@@ -88,7 +106,7 @@ ${g2o_SOURCE_DIR}/stuff
 ${G2O_EIGEN3_INCLUDE})
 
 # Include the subdirectories
-ADD_LIBRARY(g2o ${G2O_LIB_TYPE}
+ADD_LIBRARY(g2o ${G2O_BUILD_TYPE}
 #types
 g2o/types/types_sba.h
 g2o/types/types_six_dof_expmap.h
diff --git a/build.sh b/build.sh
index 96d1c09..10234a3 100755
--- a/build.sh
+++ b/build.sh
@@ -1,4 +1,4 @@
-echo "Configuring and building Thirdparty/DBoW2 ..."
+#!/usr/bin/env bash
 
 cd Thirdparty/DBoW2
 mkdir build
@@ -24,11 +24,8 @@ cd build
 cmake .. -DCMAKE_BUILD_TYPE=Release
 make -j
 
-cd ../../../
-
+cd ../../../Vocabulary
 echo "Uncompress vocabulary ..."
-
-cd Vocabulary
 tar -xf ORBvoc.txt.tar.gz
 cd ..
 
-- 
2.30.2

